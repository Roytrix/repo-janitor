name: Test Branch Sweeping github repo

on:
  workflow_dispatch:
    inputs:
      weeks_threshold:
        description: 'Number of weeks to consider a branch stale'
        required: true
        default: '4'
        type: number
      dry_run:
        description: 'Run in dry-run mode (no actual deletion)'
        required: true
        default: true
        type: boolean
      protected_branches:
        description: 'Space-separated list of protected branches'
        required: false
        default: 'release/**'
        type: string

jobs:
  test-sweeping:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for accurate testing

      - name: Generate GitHub App token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.RJ_APP_ID }}
          private_key: ${{ secrets.RJ_APP_PRIVATE_KEY }}
          
      - name: Verify token permissions
        run: |
          echo "Verifying GitHub token permissions..."
          export GH_TOKEN="${{ steps.generate-token.outputs.token }}"
          
          # Check authentication status and scopes
          echo "Auth Status:"
          gh auth status
          
          # Test repository-specific permissions instead of user permissions
          echo "Testing repository permissions..."
          
          # Check if the token has repository access permissions by accessing the current repo
          REPO_ACCESS=$(gh api repos/${{ github.repository }} --jq '.name' || echo "API_ACCESS_FAILED")
          if [[ "$REPO_ACCESS" == "API_ACCESS_FAILED" ]]; then
            echo "::error::Token lacks basic read permission for repository API"
            exit 1
          fi
          
          echo "Basic repository API access verified."
          echo "Repository name: $REPO_ACCESS"
          
          # Check if we can list branches - this is needed for branch sweeping
          echo "Testing branch listing permissions..."
          BRANCHES=$(gh api repos/${{ github.repository }}/branches --jq '.[].name' || echo "API_ACCESS_FAILED")
          if [[ "$BRANCHES" == "API_ACCESS_FAILED" ]]; then
            echo "::error::Token lacks permission to list branches"
            exit 1
          fi
          
          echo "Branch listing permissions verified."

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Verify Python environment
        run: |
          python --version
          python -c "import sys; print(f'Python path: {sys.path}')"
          
      - name: Update PYTHONPATH
        run: |
          echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV
          echo "Added current directory to PYTHONPATH: $(pwd)"
          
      - name: Install GitHub CLI
        run: |
          # Install GitHub CLI if not already available
          if ! command -v gh &>/dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          else
            echo "GitHub CLI already installed"
          fi

      - name: Perform authenticated operations
        run: |
            chmod +x ./branch-sweeper/tests/github-repo-tests/*.py
            python ./branch-sweeper/tests/github-repo-tests/test_github_sweeping_repo.py --repo-name repo-janitor-testing
        env:
          # Set authentication token for GitHub CLI
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          # Set environment variables for our custom GitHub App authentication
          RJ_APP_ID: ${{ secrets.RJ_APP_ID }}
          RJ_APP_PRIVATE_KEY: ${{ secrets.RJ_APP_PRIVATE_KEY }}
          RJ_APP_NAME: "Repo Janitor App"
          # Test parameters
          WEEKS_THRESHOLD: ${{ inputs.weeks_threshold }}
          DRY_RUN: ${{ inputs.dry_run }}
          PROTECTED_BRANCHES: ${{ inputs.protected_branches }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Upload test summaries
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: branch-sweeper-test-results
          path: |
            ./summary.md
            ./github-test-summary.md
            ./github-summary.md
          if-no-files-found: warn
          retention-days: 7
      
      - name: Post additional information to summary
        if: always()
        run: |
          if [ -f github-test-summary.md ]; then
            echo "## GitHub Repository Test Results" >> $GITHUB_STEP_SUMMARY
            cat github-test-summary.md >> $GITHUB_STEP_SUMMARY
          elif [ -f summary.md ]; then
            echo "## Branch Sweeper Results" >> $GITHUB_STEP_SUMMARY
            cat summary.md >> $GITHUB_STEP_SUMMARY
          else
            echo "## No test results found" >> $GITHUB_STEP_SUMMARY
            echo "No summary.md or github-test-summary.md file was generated." >> $GITHUB_STEP_SUMMARY
          fi
          echo "## Environment Information" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Runner: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- Git version: $(git --version)" >> $GITHUB_STEP_SUMMARY
          echo "- Repository: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY