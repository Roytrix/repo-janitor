name: 'Branch Sweeper'
description: 'Automatically cleans up dusty branches in GitHub repositories'
author: 'GitHub Actions'

inputs:
  dry_run:
    description: 'Run in dry-run mode (no actual deletions)'
    required: false
    default: 'false'
  weeks_threshold:
    description: 'Age threshold in weeks'
    required: false
    default: '2'
  default_branch:
    description: 'Default branch name (if empty, will be auto-detected from repository)'
    required: false
    default: ''
  token:
    description: 'GitHub PAT with repo permissions'
    required: true

outputs:
  deleted_count:
    description: 'Number of branches deleted'
    value: ${{ steps.delete-branches.outputs.deleted_count }}

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history
        token: ${{ inputs.token }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Verify Python environment
      shell: python
      run: |
        import sys
        import platform
        print(f"Python version: {platform.python_version()}")
        print(f"Python executable: {sys.executable}")
        print(f"Python path: {sys.path}")
    
    - name: Set script permissions
      shell: bash
      run: |
        chmod +x ${{ github.action_path }}/scripts/*.py

    - name: Set variables
      shell: python
      id: variables
      run: |
        import sys
        sys.path.append('${{ github.action_path }}/scripts')
        from set_variables import set_variables
        sys.exit(set_variables("${{ inputs.dry_run }}", "${{ inputs.weeks_threshold }}", "${{ inputs.default_branch }}", "${{ github.event.repository.default_branch }}"))

    - name: Fetch protected branches
      id: fetch-protected-branches
      shell: python
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        import sys
        sys.path.append('${{ github.action_path }}/scripts')
        from fetch_protected_branches import fetch_protected_branches
        import github_auth
        
        # Ensure GitHub authentication is set up
        github_auth.check_github_auth()
        
        sys.exit(0 if fetch_protected_branches("${{ github.repository }}") else 1)

    - name: Show protected branches
      shell: python
      run: |
        import sys
        sys.path.append('${{ github.action_path }}/scripts')
        from show_protected_branches import show_protected_branches
        sys.exit(show_protected_branches("${{ env.PROTECTED_BRANCHES }}"))

    - name: Validate inputs
      shell: python
      run: |
        import sys
        sys.path.append('${{ github.action_path }}/scripts')
        from validate_inputs import validate_weeks_threshold
        sys.exit(validate_weeks_threshold("${{ inputs.weeks_threshold }}"))

    - name: Sweeping dusty branches
      shell: python
      id: delete-branches
      env:
        GH_TOKEN: ${{ inputs.token }}
        GITHUB_TOKEN: ${{ inputs.token }}
        DEBUG: 'true'  # Enable verbose output
      run: |
        import sys
        sys.path.append('${{ github.action_path }}/scripts')
        from branch_sweeper import BranchSweeper
        import github_auth
        
        # Ensure GitHub authentication is set up
        github_auth.check_github_auth()
        
        # Convert string args to appropriate types
        dry_run = "${{ env.DRY_RUN }}".lower() == "true"
        
        try:
            weeks_threshold = int("${{ env.WEEKS_THRESHOLD }}")
        except ValueError:
            print("::error::weeks_threshold must be a valid integer")
            sys.exit(1)
        
        # Create and run the branch sweeper
        sweeper = BranchSweeper(
            dry_run=dry_run,
            weeks_threshold=weeks_threshold,
            default_branch="${{ env.DEFAULT_BRANCH }}",
            protected_branches="${{ env.PROTECTED_BRANCHES }}",
            repo="${{ github.repository }}",
            verbose=True
        )
        
        sys.exit(sweeper.run())

    - name: Upload summary
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: branch-cleanup-summary
        path: summary.md
        retention-days: 7

    - name: Post summary
      if: always()
      shell: bash
      run: |
        if [ -f summary.md ]; then
          cat summary.md >> $GITHUB_STEP_SUMMARY
        else
          echo "::warning::Summary file not found"
        fi
